#! /usr/bin/env python2.7
# encoding=utf8
"""
单测Demo
author: evilcapricorn0110@gmail.com
date: 2018-03
"""

import unittest
from HTMLTestRunner import HTMLTestRunner
from my_demo import MyDemo, MyDemoError


class TestMyDemo(unittest.TestCase):
    @classmethod
    def tearDownClass(self):
        print('tearDownClass:所有测试用例执行之前触发一次')
        
    @classmethod
    def setUpClass(self):
        print('setUpClass:所有测试用例执行之后触发一次')
    
    def setUp(self):
        # 每个测试用例执行之前触发一次
        print("setUp:每个测试用例执行之前触发一次")
        
    def tearDown(self):
        # 每个测试用例执行之后触发一次
        print("tearDown:每个测试用例执行之后触发一次")        
        
    def test_my_demo_func1(self):
        demo = MyDemo()
        self.assertEqual(demo.func1('男', 24), '看av')
        self.assertEqual(demo.func1('女', 24), '逛taobao')
        # self.assertNotEqual(demo.func1('男', 1), '看av')
        # self.assertNotEqual(demo.func1('女', 1), '逛taobao')
        
    def test_my_demo_func2(self):
        demo = MyDemo()
        #self.assertEqual(demo.func2(1), '上班')
        self.assertTrue(demo.func2(6) == '加班')
        with self.assertRaises(MyDemoError):
            demo.func2(8)
        
    def test_my_demo_func3(self):
        demo = MyDemo()
        self.assertEqual(demo.func3(100, 2), 50)
    
    # @unittest.skipIf(condition, reason)
    # @unittest.skipUnless(condition, reason)
    @unittest.skip("skip this case")
    def test_func4(self):
        self.assertEqual(1+1, 3-1)
        self.assertNotEqual(1+1, 1-1)
        self.assertTrue(not False)
        self.assertFalse(not True)
        self.assertIsNone(None)
        self.assertIsNotNone(1)
        self.assertIn('b', ['a', 'b', 'c'])
        self.assertNotIn('b', ['x', 'y', 'z'])


if __name__ == '__main__':
    unittest.main()
    
    
    # # 测试用例suite
    # test_suite = unittest.TestSuite()
    # case_list = [
        # TestMyDemo('test_my_demo_func1'),
        # TestMyDemo('test_my_demo_func2')
    # ]
    # test_suite.addTests(case_list)
    
    # # 文本报告runner
    # runner = unittest.TextTestRunner(verbosity=2)
    # runner.run(test_suite)
    
    # # 第三方html报告runner
    # with open('HTMLReport.html', 'w') as f:
        # runner = HTMLTestRunner(stream=f,
                                # title = 'MyDemo Test Report',
                                # description='generated by HTMLTestRunner.',
                                # verbosity=2)
        # runner.run(test_suite)    